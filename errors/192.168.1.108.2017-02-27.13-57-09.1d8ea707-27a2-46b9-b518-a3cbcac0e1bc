(dp1
S'output'
p2
S"<class 'applications.kayoo.modules.http.http_exception.HttpException'> 405 METHOD NOT ALLOWED"
p3
sS'layer'
p4
S'/home/kevin/web2py/applications/kayoo/controllers/user.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["GET"], request)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"_id":"optional"}, "getFirstByFieldsUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef getFirstByFieldsUser():\n    core = Core()\n    result = core.UserOperation("getFirstByFieldsUser", request.vars)\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["GET"], request)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"_id":"mandatory"}, "getByIdUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef getByIdUser():\n    _id = request.vars["_id"]\n    core = Core()\n    result = core.UserOperation("getByIdUser", {"_id":_id})\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["GET"], request)\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef getUsers():\n    core = Core()\n    result = core.UserOperation("getAllUser", {})\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["DELETE"], request)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"_id":"mandatory"}, "deleteUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef deleteUser():\n    _id = request.vars["_id"]\n    core = Core()\n    result = core.UserOperation("deleteUser", {"_id":_id})\n    if result >= 1:\n        return response.json({"result":"success"})\n    return response.json({"result":"failed"})\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@HTTP_METHOD_OPTION_CHECKER_DECORATOR.isOption(request, response)\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef newUser():\n    core = Core()\n    result = core.UserOperation("createUser", request.vars)\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@HTTP_METHOD_OPTION_CHECKER_DECORATOR.isOption(request, response)\n#@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"id":"mandatory", "new_values":"mandatory"}, "updateUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef updateUser():\n    print request.vars\n    print request.client\n    #_id = request.vars["_id"]\n    #_new_values = request.vars["new_values"]\n    #core = Core()\n    #result = core.UserOperation("updateUser", {"_id":_id, "new_values":_new_values})\n    #print result\n    #return response.json(result)\n    return "OK"\n\n##Used from Front##\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"id_user":"mandatory", "id_community":"mandatory"}, "suscribeUser2Community")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef suscribeUser2Community():\n    core = Core()\n    result = core.UserOperation("suscribeUser2Community", dict(request.vars))\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef unsuscribeUser2Community():\n    core = Core()\n    result = core.UserOperation("unsuscribeUser2Community", dict(request.vars))\n    return response.json(result)\n\n##Used from Front##\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["GET"], request)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"id":"mandatory"}, "getUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef getUser():\n    _id = request.vars["id"]\n    core = Core()\n    result = core.UserOperation("getUserSuscribedCommunities", {"_id": _id})\n    return response.json(result)\n\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["GET"], request)\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef getAllUsersFiltered():\n    core = Core()\n    result = core.UserOperation("getAllUsersFiltered", dict(request.vars))\n    return response.json(result)\n\n##Used from Front##\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@HTTP_METHOD_OPTION_CHECKER_DECORATOR.isOption(request, response)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"mail":"mandatory", "psswd":"mandatory"}, "loginUser")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef login():\n    core = Core()\n    result = core.UserOperation("loginUser", dict(request.vars))\n    return response.json(result)\n\n##Used from Front##\n@HTTP_METHOD_CONSTRAINT_DECORATOR.isAllowed(["POST","OPTIONS"], request)\n@HTTP_METHOD_OPTION_CHECKER_DECORATOR.isOption(request, response)\n@CHECK_PARAMETERS_DECORATOR.checkIt(request.vars, {"mail":"mandatory", "psswd":"mandatory", "name":"mandatory"}, "signup")\n@CROSS_DOMAIN_DECORATOR.changesHeaders(response)\ndef signup():\n    core = Core()\n    result = core.UserOperation("signup", dict(request.vars))\n    return response.json(result)\nresponse._vars=response._caller(signup)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/kevin/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/kevin/web2py/applications/kayoo/controllers/user.py", line 113, in <module>\n  File "/home/kevin/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "applications/kayoo/modules/decorators/http_method_constraint_decorator.py", line 12, in decorator\n    raise HttpException(405)\nHttpException: 405 METHOD NOT ALLOWED\n'
p11
s.